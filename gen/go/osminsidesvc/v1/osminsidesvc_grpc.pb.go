// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package osminsidesvc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OSMInsideServiceClient is the client API for OSMInsideService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OSMInsideServiceClient interface {
	//  Stab returns features containing lat lng
	Within(ctx context.Context, in *WithinRequest, opts ...grpc.CallOption) (*WithinResponse, error)
}

type oSMInsideServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOSMInsideServiceClient(cc grpc.ClientConnInterface) OSMInsideServiceClient {
	return &oSMInsideServiceClient{cc}
}

func (c *oSMInsideServiceClient) Within(ctx context.Context, in *WithinRequest, opts ...grpc.CallOption) (*WithinResponse, error) {
	out := new(WithinResponse)
	err := c.cc.Invoke(ctx, "/osminsidesvc.v1.OSMInsideService/Within", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OSMInsideServiceServer is the server API for OSMInsideService service.
// All implementations should embed UnimplementedOSMInsideServiceServer
// for forward compatibility
type OSMInsideServiceServer interface {
	//  Stab returns features containing lat lng
	Within(context.Context, *WithinRequest) (*WithinResponse, error)
}

// UnimplementedOSMInsideServiceServer should be embedded to have forward compatible implementations.
type UnimplementedOSMInsideServiceServer struct {
}

func (UnimplementedOSMInsideServiceServer) Within(context.Context, *WithinRequest) (*WithinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Within not implemented")
}

// UnsafeOSMInsideServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OSMInsideServiceServer will
// result in compilation errors.
type UnsafeOSMInsideServiceServer interface {
	mustEmbedUnimplementedOSMInsideServiceServer()
}

func RegisterOSMInsideServiceServer(s grpc.ServiceRegistrar, srv OSMInsideServiceServer) {
	s.RegisterService(&OSMInsideService_ServiceDesc, srv)
}

func _OSMInsideService_Within_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSMInsideServiceServer).Within(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osminsidesvc.v1.OSMInsideService/Within",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSMInsideServiceServer).Within(ctx, req.(*WithinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OSMInsideService_ServiceDesc is the grpc.ServiceDesc for OSMInsideService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OSMInsideService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "osminsidesvc.v1.OSMInsideService",
	HandlerType: (*OSMInsideServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Within",
			Handler:    _OSMInsideService_Within_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "osminsidesvc/v1/osminsidesvc.proto",
}
