// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package insidesvc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InsideServiceClient is the client API for InsideService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InsideServiceClient interface {
	//  Stab returns features containing lat lng
	Within(ctx context.Context, in *WithinRequest, opts ...grpc.CallOption) (*WithinResponse, error)
	// Get returns a feature by its internal ID and polygon index
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
}

type insideServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInsideServiceClient(cc grpc.ClientConnInterface) InsideServiceClient {
	return &insideServiceClient{cc}
}

func (c *insideServiceClient) Within(ctx context.Context, in *WithinRequest, opts ...grpc.CallOption) (*WithinResponse, error) {
	out := new(WithinResponse)
	err := c.cc.Invoke(ctx, "/insidesvc.v1.InsideService/Within", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *insideServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/insidesvc.v1.InsideService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InsideServiceServer is the server API for InsideService service.
// All implementations should embed UnimplementedInsideServiceServer
// for forward compatibility
type InsideServiceServer interface {
	//  Stab returns features containing lat lng
	Within(context.Context, *WithinRequest) (*WithinResponse, error)
	// Get returns a feature by its internal ID and polygon index
	Get(context.Context, *GetRequest) (*GetResponse, error)
}

// UnimplementedInsideServiceServer should be embedded to have forward compatible implementations.
type UnimplementedInsideServiceServer struct {
}

func (UnimplementedInsideServiceServer) Within(context.Context, *WithinRequest) (*WithinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Within not implemented")
}
func (UnimplementedInsideServiceServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

// UnsafeInsideServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InsideServiceServer will
// result in compilation errors.
type UnsafeInsideServiceServer interface {
	mustEmbedUnimplementedInsideServiceServer()
}

func RegisterInsideServiceServer(s grpc.ServiceRegistrar, srv InsideServiceServer) {
	s.RegisterService(&InsideService_ServiceDesc, srv)
}

func _InsideService_Within_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InsideServiceServer).Within(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/insidesvc.v1.InsideService/Within",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InsideServiceServer).Within(ctx, req.(*WithinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InsideService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InsideServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/insidesvc.v1.InsideService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InsideServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InsideService_ServiceDesc is the grpc.ServiceDesc for InsideService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InsideService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "insidesvc.v1.InsideService",
	HandlerType: (*InsideServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Within",
			Handler:    _InsideService_Within_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _InsideService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "insidesvc/v1/insidesvc.proto",
}
